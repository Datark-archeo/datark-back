#!/usr/bin/env node

/**
 * Module dependencies.
 */
const PORT = process.env.PORT || '3000';
const app = require('../app');
const debug = require('debug')('datark-back:server');
const setupSocketHandlers = require('../controllers/socketController');
const http = require('http');
const {Server} = require("socket.io");

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "https://preprod.datark.fr",  // Spécifiez explicitement l'origine autorisée
    methods: ["GET", "POST"],  // Méthodes HTTP autorisées pour CORS
    credentials: true,  // Autorise les cookies CORS et les en-têtes d'autorisation
    allowedHeaders: ["Content-Type", "Authorization"]  // En-têtes autorisés dans les requêtes CORS
  }
});
setupSocketHandlers(io);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
      ? 'Pipe ' + PORT
      : 'Port ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
